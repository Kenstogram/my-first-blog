"""
A set of request processors that return dictionaries to be merged into a
template context. Each function takes the request object as its only parameter
and returns a dictionary to add to the context.

These are referenced from the 'context_processors' option of the configuration
of a DjangoTemplates backend and used by RequestContext.
"""

<<<<<<< HEAD
from __future__ import unicode_literals

=======
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435
import itertools

from django.conf import settings
from django.middleware.csrf import get_token
<<<<<<< HEAD
from django.utils.encoding import force_text
=======
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435
from django.utils.functional import SimpleLazyObject, lazy


def csrf(request):
    """
    Context processor that provides a CSRF token, or the string 'NOTPROVIDED' if
    it has not been provided by either a view decorator or the middleware
    """
    def _get_val():
        token = get_token(request)
        if token is None:
            # In order to be able to provide debugging info in the
            # case of misconfiguration, we use a sentinel value
            # instead of returning an empty dict.
            return 'NOTPROVIDED'
        else:
<<<<<<< HEAD
            return force_text(token)
=======
            return token
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435

    return {'csrf_token': SimpleLazyObject(_get_val)}


def debug(request):
    """
<<<<<<< HEAD
    Returns context variables helpful for debugging.
=======
    Return context variables helpful for debugging.
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435
    """
    context_extras = {}
    if settings.DEBUG and request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS:
        context_extras['debug'] = True
        from django.db import connections
        # Return a lazy reference that computes connection.queries on access,
        # to ensure it contains queries triggered after this function runs.
        context_extras['sql_queries'] = lazy(
<<<<<<< HEAD
            lambda: list(itertools.chain(*[connections[x].queries for x in connections])),
=======
            lambda: list(itertools.chain.from_iterable(connections[x].queries for x in connections)),
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435
            list
        )
    return context_extras


def i18n(request):
    from django.utils import translation
    return {
        'LANGUAGES': settings.LANGUAGES,
        'LANGUAGE_CODE': translation.get_language(),
        'LANGUAGE_BIDI': translation.get_language_bidi(),
    }


def tz(request):
    from django.utils import timezone
    return {'TIME_ZONE': timezone.get_current_timezone_name()}


def static(request):
    """
<<<<<<< HEAD
    Adds static-related context variables to the context.
=======
    Add static-related context variables to the context.
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435
    """
    return {'STATIC_URL': settings.STATIC_URL}


def media(request):
    """
<<<<<<< HEAD
    Adds media-related context variables to the context.
=======
    Add media-related context variables to the context.
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435
    """
    return {'MEDIA_URL': settings.MEDIA_URL}


def request(request):
    return {'request': request}
