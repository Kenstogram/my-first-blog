<<<<<<< HEAD
# Since this package contains a "django" module, this is required on Python 2.
from __future__ import absolute_import

=======
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435
from django.core.exceptions import (
    ImproperlyConfigured, SuspiciousFileOperation,
)
from django.template.utils import get_app_template_dirs
from django.utils._os import safe_join
from django.utils.functional import cached_property


<<<<<<< HEAD
class BaseEngine(object):
=======
class BaseEngine:
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435

    # Core methods: engines have to provide their own implementation
    #               (except for from_string which is optional).

    def __init__(self, params):
        """
<<<<<<< HEAD
        Initializes the template engine.

        Receives the configuration settings as a dict.
=======
        Initialize the template engine.

        `params` is a dict of configuration settings.
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435
        """
        params = params.copy()
        self.name = params.pop('NAME')
        self.dirs = list(params.pop('DIRS'))
        self.app_dirs = bool(params.pop('APP_DIRS'))
        if params:
            raise ImproperlyConfigured(
                "Unknown parameters: {}".format(", ".join(params)))

    @property
    def app_dirname(self):
        raise ImproperlyConfigured(
            "{} doesn't support loading templates from installed "
            "applications.".format(self.__class__.__name__))

    def from_string(self, template_code):
        """
<<<<<<< HEAD
        Creates and returns a template for the given source code.
=======
        Create and return a template for the given source code.
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435

        This method is optional.
        """
        raise NotImplementedError(
            "subclasses of BaseEngine should provide "
            "a from_string() method")

    def get_template(self, template_name):
        """
<<<<<<< HEAD
        Loads and returns a template for the given name.

        Raises TemplateDoesNotExist if no such template exists.
=======
        Load and return a template for the given name.

        Raise TemplateDoesNotExist if no such template exists.
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435
        """
        raise NotImplementedError(
            "subclasses of BaseEngine must provide "
            "a get_template() method")

    # Utility methods: they are provided to minimize code duplication and
    #                  security issues in third-party backends.

    @cached_property
    def template_dirs(self):
        """
<<<<<<< HEAD
        Returns a list of directories to search for templates.
=======
        Return a list of directories to search for templates.
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435
        """
        # Immutable return value because it's cached and shared by callers.
        template_dirs = tuple(self.dirs)
        if self.app_dirs:
            template_dirs += get_app_template_dirs(self.app_dirname)
        return template_dirs

    def iter_template_filenames(self, template_name):
        """
<<<<<<< HEAD
        Iterates over candidate files for template_name.

        Ignores files that don't lie inside configured template dirs to avoid
=======
        Iterate over candidate files for template_name.

        Ignore files that don't lie inside configured template dirs to avoid
>>>>>>> 37c99181c9a6b95433d60f8c8ef9af5731096435
        directory traversal attacks.
        """
        for template_dir in self.template_dirs:
            try:
                yield safe_join(template_dir, template_name)
            except SuspiciousFileOperation:
                # The joined path was located outside of this template_dir
                # (it might be inside another one, so this isn't fatal).
                pass
